from add_landmarks_final import *

def VisualizeFeatures(gaze_point, feature_list, face_points, special_points):
   plt.figure(figsize=(10.88,10.8))
   if gaze_point != None:
      plt.plot(gaze_point.x, gaze_point.y, 'bo')
   x, y = zip(*face_points)
   plt.plot(x, y, 'go',markersize=1)
   for feature_poly in feature_list:
      xx, yy = feature_poly.exterior.coords.xy
      plt.plot(xx, yy)
      plt.fill(xx, yy, alpha=0.3)
   for s_point in special_points:
       # print("SPECIAL")
       plt.plot(s_point[0], s_point[1],'ro' ,markersize=10)
   plt.axis('equal')
   plt.show()

def VisualizeFeaturesWithIndex(gaze_point, feature_list, face_points, special_points):
   
   plt.figure(figsize=(40,40))
   if gaze_point != None:
      plt.plot(gaze_point.x, gaze_point.y, 'bo', markersize=20)
   x, y = zip(*face_points)
   plt.plot(x, y, 'go',markersize=5)
   for i in range(len(face_points)):
       plt.text(x[i], y[i], str(i))
   for feature_poly in feature_list:
      xx, yy = feature_poly.exterior.coords.xy
      plt.plot(xx, yy)
      plt.fill(xx, yy, alpha=0.3)
   for s_point in special_points:
       plt.plot(s_point[0], s_point[1],'ro' ,markersize=10)
   plt.axis('equal')
   plt.savefig("facial_features.png")
   plt.show()

def TestGetClosestPoint(gaze_xy=None, face_points=None, feature_list=None):
    face_points = [[[534, 164], [541, 144], [537, 151], [538, 126], [542, 138], [542, 131], [542, 116], [499, 109], [543, 102], [544, 94], [547, 64], [533, 165], [533, 167], [533, 168], [533, 168], [533, 170], [533, 172], [532, 174], [531, 183], [540, 147], [534, 147], [475, 82], [514, 116], [508, 116], [503, 114], [496, 110], [519, 115], [509, 98], [515, 99], [503, 98], [499, 99], [490, 113], [510, 192], [497, 107], [470, 109], [484, 107], [510, 138], [528, 162], [528, 166], [522, 163], [518, 164], [523, 166], [519, 166], [508, 172], [537, 143], [537, 138], [492, 91], [522, 126], [523, 141], [522, 138], [491, 135], [538, 131], [508, 86], [499, 87], [484, 72], [532, 96], [520, 103], [504, 167], [464, 168], [526, 145], [530, 147], [512, 167], [513, 167], [496, 83], [521, 144], [518, 88], [519, 83], [514, 60], [491, 78], [518, 73], [488, 88], [482, 87], [528, 164], [523, 164], [518, 165], [527, 146], [512, 167], [515, 168], [514, 167], [530, 143], [519, 167], [523, 167], [528, 167], [525, 182], [527, 173], [528, 171], [528, 169], [528, 167], [520, 167], [519, 167], [518, 168], [518, 170], [513, 158], [461, 138], [538, 149], [516, 167], [516, 167], [531, 150], [522, 147], [531, 149], [516, 128], [506, 130], [520, 141], [497, 64], [503, 73], [506, 81], [512, 176], [532, 87], [531, 75], [530, 61], [498, 112], [484, 115], [522, 114], [492, 101], [527, 123], [527, 139], [477, 120], [487, 120], [494, 123], [505, 124], [514, 123], [520, 121], [536, 116], [476, 133], [488, 99], [537, 147], [523, 131], [464, 109], [525, 119], [519, 142], [494, 106], [527, 136], [461, 153], [522, 112], [532, 133], [482, 180], [479, 188], [466, 135], [474, 172], [476, 97], [507, 197], [537, 149], [517, 135], [479, 107], [504, 111], [509, 112], [514, 169], [475, 145], [516, 205], [498, 199], [489, 195], [546, 78], [526, 207], [514, 113], [518, 112], [521, 112], [483, 97], [518, 109], [513, 108], [509, 107], [504, 107], [501, 107], [469, 94], [501, 110], [537, 155], [519, 155], [526, 144], [530, 154], [541, 109], [491, 187], [499, 192], [517, 201], [471, 180], [521, 111], [532, 124], [528, 202], [507, 203], [466, 149], [524, 167], [523, 168], [523, 169], [522, 172], [518, 179], [516, 167], [515, 166], [514, 166], [507, 162], [484, 148], [532, 119], [528, 107], [524, 108], [516, 167], [480, 163], [534, 107], [513, 186], [542, 126], [537, 121], [542, 121], [528, 132], [529, 197], [530, 190], [522, 189], [501, 175], [513, 146], [507, 181], [500, 143], [507, 150], [492, 152], [519, 195], [523, 135], [495, 180], [502, 186], [498, 168], [474, 156], [488, 169], [468, 161], [501, 157], [528, 127], [528, 142], [524, 143], [532, 138], [525, 101], [517, 95], [509, 93], [502, 93], [496, 96], [490, 107], [468, 122], [493, 115], [499, 118], [506, 119], [514, 119], [520, 118], [524, 117], [462, 124], [524, 145], [533, 128], [533, 142], [534, 146], [532, 144], [524, 147], [536, 146], [535, 148], [524, 112], [528, 114], [530, 115], [499, 107], [495, 102], [546, 128], [571, 126], [542, 149], [587, 106], [557, 126], [561, 128], [566, 128], [572, 128], [554, 123], [567, 111], [562, 111], [572, 113], [574, 116], [574, 131], [544, 196], [573, 126], [584, 132], [579, 127], [559, 147], [539, 164], [537, 168], [543, 167], [545, 170], [541, 170], [543, 171], [550, 179], [545, 145], [546, 139], [582, 110], [551, 132], [552, 146], [552, 144], [572, 150], [546, 133], [574, 100], [579, 104], [587, 94], [553, 101], [557, 112], [554, 175], [566, 185], [547, 149], [543, 150], [548, 175], [547, 174], [582, 101], [550, 149], [566, 99], [568, 94], [573, 74], [584, 98], [570, 84], [584, 108], [586, 109], [538, 166], [542, 169], [544, 171], [546, 150], [547, 175], [545, 174], [546, 174], [547, 147], [542, 172], [540, 170], [536, 169], [536, 184], [537, 175], [537, 173], [537, 171], [537, 169], [542, 172], [543, 173], [544, 174], [544, 176], [552, 165], [574, 159], [544, 173], [545, 174], [542, 152], [548, 152], [543, 151], [556, 136], [563, 141], [552, 147], [582, 83], [579, 90], [577, 96], [546, 181], [557, 93], [559, 81], [562, 68], [570, 129], [578, 134], [552, 121], [578, 119], [549, 127], [551, 144], [582, 141], [575, 138], [570, 138], [561, 136], [556, 132], [551, 128], [545, 118], [580, 152], [581, 118], [542, 148], [551, 136], [581, 133], [549, 124], [551, 147], [575, 125], [551, 140], [570, 172], [552, 120], [549, 136], [561, 192], [557, 200], [579, 156], [567, 188], [585, 119], [544, 202], [540, 149], [554, 141], [582, 128], [566, 126], [562, 125], [546, 175], [577, 164], [534, 207], [546, 205], [551, 203], [558, 123], [555, 121], [553, 120], [583, 117], [556, 120], [559, 122], [563, 123], [567, 124], [569, 125], [585, 118], [569, 126], [549, 160], [548, 148], [542, 156], [555, 196], [549, 199], [537, 203], [562, 194], [553, 120], [548, 127], [541, 206], [576, 169], [540, 170], [540, 172], [541, 173], [541, 176], [542, 183], [545, 173], [546, 173], [547, 173], [554, 170], [573, 164], [547, 122], [550, 113], [552, 115], [544, 173], [569, 178], [547, 111], [543, 190], [546, 123], [549, 136], [537, 191], [553, 183], [554, 153], [548, 187], [565, 155], [558, 160], [567, 166], [537, 198], [551, 140], [556, 189], [550, 193], [558, 178], [573, 173], [563, 181], [572, 179], [560, 168], [549, 132], [549, 146], [550, 148], [549, 141], [555, 108], [564, 106], [570, 107], [575, 109], [578, 113], [577, 126], [582, 144], [572, 132], [567, 133], [562, 131], [556, 129], [552, 125], [550, 123], [577, 146], [549, 149], [548, 131], [547, 145], [543, 148], [546, 146], [547, 151], [543, 148], [541, 149], [551, 119], [548, 119], [547, 119], [571, 125], [576, 120], [512, 111], [516, 111], [512, 106], [507, 110], [511, 115], [562, 122], [567, 124], [563, 118], [557, 121], [561, 127]]]
    face_points = list(map(lambda p_xy: (p_xy[0], -p_xy[1]), face_points[0]))
    polygons = CreatePolygons(face_points)
    # Not on face   
    gaze_xy = Point(460, -200)
    print(polygons[0])
    point_index, point, distance = GetClosestPoint(gaze_xy, face_points)
    VisualizeFeatures(gaze_xy, polygons, face_points, [point])
    print(point_index, point, distance)
    
    # On left eye
    gaze_xy = Point(500, -100)
    point_index, point, distance = GetClosestPoint(gaze_xy, face_points)
    VisualizeFeatures(gaze_xy, polygons, face_points, [point])
    print(point_index, point, distance)
    
    # On right eye
    gaze_xy = Point(560, -100)
    point_index, point, distance = GetClosestPoint(gaze_xy, face_points)
    VisualizeFeatures(gaze_xy, polygons, face_points, [point])
    print(point_index, point, distance)
    
    # On nose
    gaze_xy = Point(540, -140)
    point_index, point, distance = GetClosestPoint(gaze_xy, face_points)
    VisualizeFeatures(gaze_xy, polygons, face_points, [point])
    print(point_index, point, distance)
    
    # On mouth 
    gaze_xy = Point(520, -160)
    point_index, point, distance = GetClosestPoint(gaze_xy, face_points)
    VisualizeFeatures(gaze_xy, polygons, face_points, [point])
    print(point_index, point, distance)
#     # On face
#     point_index, point, distance = GetClosestPoint(gaze_xy, face_points, True, )
    print("FINISHED TEST GET CLOSEST POINT")

def TestGetClosestFeature():
    face_points = [[[534, 164], [541, 144], [537, 151], [538, 126], [542, 138], [542, 131], [542, 116], [499, 109], [543, 102], [544, 94], [547, 64], [533, 165], [533, 167], [533, 168], [533, 168], [533, 170], [533, 172], [532, 174], [531, 183], [540, 147], [534, 147], [475, 82], [514, 116], [508, 116], [503, 114], [496, 110], [519, 115], [509, 98], [515, 99], [503, 98], [499, 99], [490, 113], [510, 192], [497, 107], [470, 109], [484, 107], [510, 138], [528, 162], [528, 166], [522, 163], [518, 164], [523, 166], [519, 166], [508, 172], [537, 143], [537, 138], [492, 91], [522, 126], [523, 141], [522, 138], [491, 135], [538, 131], [508, 86], [499, 87], [484, 72], [532, 96], [520, 103], [504, 167], [464, 168], [526, 145], [530, 147], [512, 167], [513, 167], [496, 83], [521, 144], [518, 88], [519, 83], [514, 60], [491, 78], [518, 73], [488, 88], [482, 87], [528, 164], [523, 164], [518, 165], [527, 146], [512, 167], [515, 168], [514, 167], [530, 143], [519, 167], [523, 167], [528, 167], [525, 182], [527, 173], [528, 171], [528, 169], [528, 167], [520, 167], [519, 167], [518, 168], [518, 170], [513, 158], [461, 138], [538, 149], [516, 167], [516, 167], [531, 150], [522, 147], [531, 149], [516, 128], [506, 130], [520, 141], [497, 64], [503, 73], [506, 81], [512, 176], [532, 87], [531, 75], [530, 61], [498, 112], [484, 115], [522, 114], [492, 101], [527, 123], [527, 139], [477, 120], [487, 120], [494, 123], [505, 124], [514, 123], [520, 121], [536, 116], [476, 133], [488, 99], [537, 147], [523, 131], [464, 109], [525, 119], [519, 142], [494, 106], [527, 136], [461, 153], [522, 112], [532, 133], [482, 180], [479, 188], [466, 135], [474, 172], [476, 97], [507, 197], [537, 149], [517, 135], [479, 107], [504, 111], [509, 112], [514, 169], [475, 145], [516, 205], [498, 199], [489, 195], [546, 78], [526, 207], [514, 113], [518, 112], [521, 112], [483, 97], [518, 109], [513, 108], [509, 107], [504, 107], [501, 107], [469, 94], [501, 110], [537, 155], [519, 155], [526, 144], [530, 154], [541, 109], [491, 187], [499, 192], [517, 201], [471, 180], [521, 111], [532, 124], [528, 202], [507, 203], [466, 149], [524, 167], [523, 168], [523, 169], [522, 172], [518, 179], [516, 167], [515, 166], [514, 166], [507, 162], [484, 148], [532, 119], [528, 107], [524, 108], [516, 167], [480, 163], [534, 107], [513, 186], [542, 126], [537, 121], [542, 121], [528, 132], [529, 197], [530, 190], [522, 189], [501, 175], [513, 146], [507, 181], [500, 143], [507, 150], [492, 152], [519, 195], [523, 135], [495, 180], [502, 186], [498, 168], [474, 156], [488, 169], [468, 161], [501, 157], [528, 127], [528, 142], [524, 143], [532, 138], [525, 101], [517, 95], [509, 93], [502, 93], [496, 96], [490, 107], [468, 122], [493, 115], [499, 118], [506, 119], [514, 119], [520, 118], [524, 117], [462, 124], [524, 145], [533, 128], [533, 142], [534, 146], [532, 144], [524, 147], [536, 146], [535, 148], [524, 112], [528, 114], [530, 115], [499, 107], [495, 102], [546, 128], [571, 126], [542, 149], [587, 106], [557, 126], [561, 128], [566, 128], [572, 128], [554, 123], [567, 111], [562, 111], [572, 113], [574, 116], [574, 131], [544, 196], [573, 126], [584, 132], [579, 127], [559, 147], [539, 164], [537, 168], [543, 167], [545, 170], [541, 170], [543, 171], [550, 179], [545, 145], [546, 139], [582, 110], [551, 132], [552, 146], [552, 144], [572, 150], [546, 133], [574, 100], [579, 104], [587, 94], [553, 101], [557, 112], [554, 175], [566, 185], [547, 149], [543, 150], [548, 175], [547, 174], [582, 101], [550, 149], [566, 99], [568, 94], [573, 74], [584, 98], [570, 84], [584, 108], [586, 109], [538, 166], [542, 169], [544, 171], [546, 150], [547, 175], [545, 174], [546, 174], [547, 147], [542, 172], [540, 170], [536, 169], [536, 184], [537, 175], [537, 173], [537, 171], [537, 169], [542, 172], [543, 173], [544, 174], [544, 176], [552, 165], [574, 159], [544, 173], [545, 174], [542, 152], [548, 152], [543, 151], [556, 136], [563, 141], [552, 147], [582, 83], [579, 90], [577, 96], [546, 181], [557, 93], [559, 81], [562, 68], [570, 129], [578, 134], [552, 121], [578, 119], [549, 127], [551, 144], [582, 141], [575, 138], [570, 138], [561, 136], [556, 132], [551, 128], [545, 118], [580, 152], [581, 118], [542, 148], [551, 136], [581, 133], [549, 124], [551, 147], [575, 125], [551, 140], [570, 172], [552, 120], [549, 136], [561, 192], [557, 200], [579, 156], [567, 188], [585, 119], [544, 202], [540, 149], [554, 141], [582, 128], [566, 126], [562, 125], [546, 175], [577, 164], [534, 207], [546, 205], [551, 203], [558, 123], [555, 121], [553, 120], [583, 117], [556, 120], [559, 122], [563, 123], [567, 124], [569, 125], [585, 118], [569, 126], [549, 160], [548, 148], [542, 156], [555, 196], [549, 199], [537, 203], [562, 194], [553, 120], [548, 127], [541, 206], [576, 169], [540, 170], [540, 172], [541, 173], [541, 176], [542, 183], [545, 173], [546, 173], [547, 173], [554, 170], [573, 164], [547, 122], [550, 113], [552, 115], [544, 173], [569, 178], [547, 111], [543, 190], [546, 123], [549, 136], [537, 191], [553, 183], [554, 153], [548, 187], [565, 155], [558, 160], [567, 166], [537, 198], [551, 140], [556, 189], [550, 193], [558, 178], [573, 173], [563, 181], [572, 179], [560, 168], [549, 132], [549, 146], [550, 148], [549, 141], [555, 108], [564, 106], [570, 107], [575, 109], [578, 113], [577, 126], [582, 144], [572, 132], [567, 133], [562, 131], [556, 129], [552, 125], [550, 123], [577, 146], [549, 149], [548, 131], [547, 145], [543, 148], [546, 146], [547, 151], [543, 148], [541, 149], [551, 119], [548, 119], [547, 119], [571, 125], [576, 120], [512, 111], [516, 111], [512, 106], [507, 110], [511, 115], [562, 122], [567, 124], [563, 118], [557, 121], [561, 127]]]
    face_points = list(map(lambda p_xy: (p_xy[0], -p_xy[1]), face_points[0]))
    # We use our perspective eg. Right Eye is right from our perspective, person's left    
    polygons = CreatePolygons(face_points)

    gaze_left_eye = Point(500,-100)
    res = GetClosestFeature(gaze_left_eye, 0, polygons[1:])
    VisualizeFeatures(gaze_left_eye, polygons, face_points,[])
    print(f'On feature: {FACIAL_FEATURE_NAMES[res[0]]}, closest feature: {FACIAL_FEATURE_NAMES[res[1]]}, distances: {res[2:]}')
    assert(res[0] == 0 and
           res[1] == 0 and
           res[2] == 0 and
           res[3] > 0 and
           res[4] > 0 and 
           res[5] > 0)
    
    gaze_right_eye = Point(560,-100)
    res = GetClosestFeature(gaze_right_eye, 0, polygons[1:])
    VisualizeFeatures(gaze_right_eye, polygons, face_points,[])
    print(f'On feature: {FACIAL_FEATURE_NAMES[res[0]]}, closest feature: {FACIAL_FEATURE_NAMES[res[1]]}, distances: {res[2:]}')
    assert(res[0] == 1 and
           res[1] == 1 and
           res[2] > 0 and
           res[3] == 0 and
           res[4] > 0 and 
           res[5] > 0)
    
    gaze_nose = Point(538, -149)
    res = GetClosestFeature(gaze_nose, 0, polygons[1:])
    VisualizeFeatures(gaze_nose, polygons, face_points,[])
    print(f'On feature: {FACIAL_FEATURE_NAMES[res[0]]}, closest feature: {FACIAL_FEATURE_NAMES[res[1]]}, distances: {res[2:]}')
    assert(res[0] == 2 and
           res[1] == 2 and
           res[2] > 0 and
           res[3] > 0 and
           res[4] == 0 and 
           res[5] > 0)
    
    gaze_mouth = Point(530, -170)
    res = GetClosestFeature(gaze_mouth, 0, polygons[1:])
    VisualizeFeatures(gaze_mouth, polygons, face_points,[])
    print(f'On feature: {FACIAL_FEATURE_NAMES[res[0]]}, closest feature: {FACIAL_FEATURE_NAMES[res[1]]}, distances: {res[2:]}')
    assert(res[0] == 3 and
           res[1] == 3 and
           res[2] > 0 and
           res[3] > 0 and
           res[4] > 0 and 
           res[5] == 0)
    
    gaze_far = Point(460, -120)
    res = GetClosestFeature(gaze_far, 0, polygons[1:])
    VisualizeFeatures(gaze_far, polygons, face_points,[])
    print(f'On feature: {FACIAL_FEATURE_NAMES[res[0]]}, closest feature: {FACIAL_FEATURE_NAMES[res[1]]}, distances: {res[2:]}')
    assert(res[0] == 4 and
           res[1] == 0 and
           res[2] > 0 and
           res[3] > 0 and
           res[4] > 0 and 
           res[5] > 0)
    
    print("Passed Get Closest Feature")

def TestGazeOnFace(face_points=None):
    # A Square
    face_points = [(0,0), (0,1), (1,1), (1,0)]
    face_poly = Polygon(face_points)

    # Gaze not in square
    gaze_point = Point(2, 0)
    on_face, dist = GazeOnFace(gaze_point, face_poly)
    assert(on_face == 0 and dist == 1)

    # Gaze on boundary
    gaze_point = Point(0, 0.5)
    on_face, dist = GazeOnFace(gaze_point, face_poly)
    assert(on_face == 1 and dist == 0)

    # Gaze inside square
    gaze_point = Point(0.5, 0.5)
    on_face, dist = GazeOnFace(gaze_point, face_poly)
    assert(on_face == 1 and dist == 0)

    # Real Face
    face_points = [[[534, 164], [541, 144], [537, 151], [538, 126], [542, 138], [542, 131], [542, 116], [499, 109], [543, 102], [544, 94], [547, 64], [533, 165], [533, 167], [533, 168], [533, 168], [533, 170], [533, 172], [532, 174], [531, 183], [540, 147], [534, 147], [475, 82], [514, 116], [508, 116], [503, 114], [496, 110], [519, 115], [509, 98], [515, 99], [503, 98], [499, 99], [490, 113], [510, 192], [497, 107], [470, 109], [484, 107], [510, 138], [528, 162], [528, 166], [522, 163], [518, 164], [523, 166], [519, 166], [508, 172], [537, 143], [537, 138], [492, 91], [522, 126], [523, 141], [522, 138], [491, 135], [538, 131], [508, 86], [499, 87], [484, 72], [532, 96], [520, 103], [504, 167], [464, 168], [526, 145], [530, 147], [512, 167], [513, 167], [496, 83], [521, 144], [518, 88], [519, 83], [514, 60], [491, 78], [518, 73], [488, 88], [482, 87], [528, 164], [523, 164], [518, 165], [527, 146], [512, 167], [515, 168], [514, 167], [530, 143], [519, 167], [523, 167], [528, 167], [525, 182], [527, 173], [528, 171], [528, 169], [528, 167], [520, 167], [519, 167], [518, 168], [518, 170], [513, 158], [461, 138], [538, 149], [516, 167], [516, 167], [531, 150], [522, 147], [531, 149], [516, 128], [506, 130], [520, 141], [497, 64], [503, 73], [506, 81], [512, 176], [532, 87], [531, 75], [530, 61], [498, 112], [484, 115], [522, 114], [492, 101], [527, 123], [527, 139], [477, 120], [487, 120], [494, 123], [505, 124], [514, 123], [520, 121], [536, 116], [476, 133], [488, 99], [537, 147], [523, 131], [464, 109], [525, 119], [519, 142], [494, 106], [527, 136], [461, 153], [522, 112], [532, 133], [482, 180], [479, 188], [466, 135], [474, 172], [476, 97], [507, 197], [537, 149], [517, 135], [479, 107], [504, 111], [509, 112], [514, 169], [475, 145], [516, 205], [498, 199], [489, 195], [546, 78], [526, 207], [514, 113], [518, 112], [521, 112], [483, 97], [518, 109], [513, 108], [509, 107], [504, 107], [501, 107], [469, 94], [501, 110], [537, 155], [519, 155], [526, 144], [530, 154], [541, 109], [491, 187], [499, 192], [517, 201], [471, 180], [521, 111], [532, 124], [528, 202], [507, 203], [466, 149], [524, 167], [523, 168], [523, 169], [522, 172], [518, 179], [516, 167], [515, 166], [514, 166], [507, 162], [484, 148], [532, 119], [528, 107], [524, 108], [516, 167], [480, 163], [534, 107], [513, 186], [542, 126], [537, 121], [542, 121], [528, 132], [529, 197], [530, 190], [522, 189], [501, 175], [513, 146], [507, 181], [500, 143], [507, 150], [492, 152], [519, 195], [523, 135], [495, 180], [502, 186], [498, 168], [474, 156], [488, 169], [468, 161], [501, 157], [528, 127], [528, 142], [524, 143], [532, 138], [525, 101], [517, 95], [509, 93], [502, 93], [496, 96], [490, 107], [468, 122], [493, 115], [499, 118], [506, 119], [514, 119], [520, 118], [524, 117], [462, 124], [524, 145], [533, 128], [533, 142], [534, 146], [532, 144], [524, 147], [536, 146], [535, 148], [524, 112], [528, 114], [530, 115], [499, 107], [495, 102], [546, 128], [571, 126], [542, 149], [587, 106], [557, 126], [561, 128], [566, 128], [572, 128], [554, 123], [567, 111], [562, 111], [572, 113], [574, 116], [574, 131], [544, 196], [573, 126], [584, 132], [579, 127], [559, 147], [539, 164], [537, 168], [543, 167], [545, 170], [541, 170], [543, 171], [550, 179], [545, 145], [546, 139], [582, 110], [551, 132], [552, 146], [552, 144], [572, 150], [546, 133], [574, 100], [579, 104], [587, 94], [553, 101], [557, 112], [554, 175], [566, 185], [547, 149], [543, 150], [548, 175], [547, 174], [582, 101], [550, 149], [566, 99], [568, 94], [573, 74], [584, 98], [570, 84], [584, 108], [586, 109], [538, 166], [542, 169], [544, 171], [546, 150], [547, 175], [545, 174], [546, 174], [547, 147], [542, 172], [540, 170], [536, 169], [536, 184], [537, 175], [537, 173], [537, 171], [537, 169], [542, 172], [543, 173], [544, 174], [544, 176], [552, 165], [574, 159], [544, 173], [545, 174], [542, 152], [548, 152], [543, 151], [556, 136], [563, 141], [552, 147], [582, 83], [579, 90], [577, 96], [546, 181], [557, 93], [559, 81], [562, 68], [570, 129], [578, 134], [552, 121], [578, 119], [549, 127], [551, 144], [582, 141], [575, 138], [570, 138], [561, 136], [556, 132], [551, 128], [545, 118], [580, 152], [581, 118], [542, 148], [551, 136], [581, 133], [549, 124], [551, 147], [575, 125], [551, 140], [570, 172], [552, 120], [549, 136], [561, 192], [557, 200], [579, 156], [567, 188], [585, 119], [544, 202], [540, 149], [554, 141], [582, 128], [566, 126], [562, 125], [546, 175], [577, 164], [534, 207], [546, 205], [551, 203], [558, 123], [555, 121], [553, 120], [583, 117], [556, 120], [559, 122], [563, 123], [567, 124], [569, 125], [585, 118], [569, 126], [549, 160], [548, 148], [542, 156], [555, 196], [549, 199], [537, 203], [562, 194], [553, 120], [548, 127], [541, 206], [576, 169], [540, 170], [540, 172], [541, 173], [541, 176], [542, 183], [545, 173], [546, 173], [547, 173], [554, 170], [573, 164], [547, 122], [550, 113], [552, 115], [544, 173], [569, 178], [547, 111], [543, 190], [546, 123], [549, 136], [537, 191], [553, 183], [554, 153], [548, 187], [565, 155], [558, 160], [567, 166], [537, 198], [551, 140], [556, 189], [550, 193], [558, 178], [573, 173], [563, 181], [572, 179], [560, 168], [549, 132], [549, 146], [550, 148], [549, 141], [555, 108], [564, 106], [570, 107], [575, 109], [578, 113], [577, 126], [582, 144], [572, 132], [567, 133], [562, 131], [556, 129], [552, 125], [550, 123], [577, 146], [549, 149], [548, 131], [547, 145], [543, 148], [546, 146], [547, 151], [543, 148], [541, 149], [551, 119], [548, 119], [547, 119], [571, 125], [576, 120], [512, 111], [516, 111], [512, 106], [507, 110], [511, 115], [562, 122], [567, 124], [563, 118], [557, 121], [561, 127]]]
    face_points = list(map(lambda p_xy: (p_xy[0], -p_xy[1]), face_points[0]))
    # We use our perspective eg. Right Eye is right from our perspective, person's left    
    polygons = CreatePolygons(face_points)

    # On boundary
    gaze_point = Point(*face_points[172])
    on_face, dist = GazeOnFace(gaze_point, polygons[0])
    VisualizeFeatures(gaze_point, polygons, face_points, [])
    assert(on_face == 1 and dist == 0)
    print("On face boundary")
    
    # Inside face
    gaze_point = Point(480, -120)
    on_face, dist = GazeOnFace(gaze_point, polygons[0])
    VisualizeFeatures(gaze_point, polygons, face_points, [])
    assert(on_face == 1 and dist == 0)
    print("On face")

    # Outside face
    gaze_point = Point(600, -180)
    on_face, dist = GazeOnFace(gaze_point, polygons[0])
    VisualizeFeatures(gaze_point, polygons, face_points, [])
    assert(on_face == 0)
    print(f'Not on face, distance: {dist}')

    print("Passed Gaze on Face")

def VisualizeFace(gaze_xy, face_points):
       polygons = CreatePolygons(face_points)
       VisualizeFeatures(gaze_xy, polygons, face_points, [])

if __name__ == "__main__":
       # Sanity Check
    # face_points = [[[534, 164], [541, 144], [537, 151], [538, 126], [542, 138], [542, 131], [542, 116], [499, 109], [543, 102], [544, 94], [547, 64], [533, 165], [533, 167], [533, 168], [533, 168], [533, 170], [533, 172], [532, 174], [531, 183], [540, 147], [534, 147], [475, 82], [514, 116], [508, 116], [503, 114], [496, 110], [519, 115], [509, 98], [515, 99], [503, 98], [499, 99], [490, 113], [510, 192], [497, 107], [470, 109], [484, 107], [510, 138], [528, 162], [528, 166], [522, 163], [518, 164], [523, 166], [519, 166], [508, 172], [537, 143], [537, 138], [492, 91], [522, 126], [523, 141], [522, 138], [491, 135], [538, 131], [508, 86], [499, 87], [484, 72], [532, 96], [520, 103], [504, 167], [464, 168], [526, 145], [530, 147], [512, 167], [513, 167], [496, 83], [521, 144], [518, 88], [519, 83], [514, 60], [491, 78], [518, 73], [488, 88], [482, 87], [528, 164], [523, 164], [518, 165], [527, 146], [512, 167], [515, 168], [514, 167], [530, 143], [519, 167], [523, 167], [528, 167], [525, 182], [527, 173], [528, 171], [528, 169], [528, 167], [520, 167], [519, 167], [518, 168], [518, 170], [513, 158], [461, 138], [538, 149], [516, 167], [516, 167], [531, 150], [522, 147], [531, 149], [516, 128], [506, 130], [520, 141], [497, 64], [503, 73], [506, 81], [512, 176], [532, 87], [531, 75], [530, 61], [498, 112], [484, 115], [522, 114], [492, 101], [527, 123], [527, 139], [477, 120], [487, 120], [494, 123], [505, 124], [514, 123], [520, 121], [536, 116], [476, 133], [488, 99], [537, 147], [523, 131], [464, 109], [525, 119], [519, 142], [494, 106], [527, 136], [461, 153], [522, 112], [532, 133], [482, 180], [479, 188], [466, 135], [474, 172], [476, 97], [507, 197], [537, 149], [517, 135], [479, 107], [504, 111], [509, 112], [514, 169], [475, 145], [516, 205], [498, 199], [489, 195], [546, 78], [526, 207], [514, 113], [518, 112], [521, 112], [483, 97], [518, 109], [513, 108], [509, 107], [504, 107], [501, 107], [469, 94], [501, 110], [537, 155], [519, 155], [526, 144], [530, 154], [541, 109], [491, 187], [499, 192], [517, 201], [471, 180], [521, 111], [532, 124], [528, 202], [507, 203], [466, 149], [524, 167], [523, 168], [523, 169], [522, 172], [518, 179], [516, 167], [515, 166], [514, 166], [507, 162], [484, 148], [532, 119], [528, 107], [524, 108], [516, 167], [480, 163], [534, 107], [513, 186], [542, 126], [537, 121], [542, 121], [528, 132], [529, 197], [530, 190], [522, 189], [501, 175], [513, 146], [507, 181], [500, 143], [507, 150], [492, 152], [519, 195], [523, 135], [495, 180], [502, 186], [498, 168], [474, 156], [488, 169], [468, 161], [501, 157], [528, 127], [528, 142], [524, 143], [532, 138], [525, 101], [517, 95], [509, 93], [502, 93], [496, 96], [490, 107], [468, 122], [493, 115], [499, 118], [506, 119], [514, 119], [520, 118], [524, 117], [462, 124], [524, 145], [533, 128], [533, 142], [534, 146], [532, 144], [524, 147], [536, 146], [535, 148], [524, 112], [528, 114], [530, 115], [499, 107], [495, 102], [546, 128], [571, 126], [542, 149], [587, 106], [557, 126], [561, 128], [566, 128], [572, 128], [554, 123], [567, 111], [562, 111], [572, 113], [574, 116], [574, 131], [544, 196], [573, 126], [584, 132], [579, 127], [559, 147], [539, 164], [537, 168], [543, 167], [545, 170], [541, 170], [543, 171], [550, 179], [545, 145], [546, 139], [582, 110], [551, 132], [552, 146], [552, 144], [572, 150], [546, 133], [574, 100], [579, 104], [587, 94], [553, 101], [557, 112], [554, 175], [566, 185], [547, 149], [543, 150], [548, 175], [547, 174], [582, 101], [550, 149], [566, 99], [568, 94], [573, 74], [584, 98], [570, 84], [584, 108], [586, 109], [538, 166], [542, 169], [544, 171], [546, 150], [547, 175], [545, 174], [546, 174], [547, 147], [542, 172], [540, 170], [536, 169], [536, 184], [537, 175], [537, 173], [537, 171], [537, 169], [542, 172], [543, 173], [544, 174], [544, 176], [552, 165], [574, 159], [544, 173], [545, 174], [542, 152], [548, 152], [543, 151], [556, 136], [563, 141], [552, 147], [582, 83], [579, 90], [577, 96], [546, 181], [557, 93], [559, 81], [562, 68], [570, 129], [578, 134], [552, 121], [578, 119], [549, 127], [551, 144], [582, 141], [575, 138], [570, 138], [561, 136], [556, 132], [551, 128], [545, 118], [580, 152], [581, 118], [542, 148], [551, 136], [581, 133], [549, 124], [551, 147], [575, 125], [551, 140], [570, 172], [552, 120], [549, 136], [561, 192], [557, 200], [579, 156], [567, 188], [585, 119], [544, 202], [540, 149], [554, 141], [582, 128], [566, 126], [562, 125], [546, 175], [577, 164], [534, 207], [546, 205], [551, 203], [558, 123], [555, 121], [553, 120], [583, 117], [556, 120], [559, 122], [563, 123], [567, 124], [569, 125], [585, 118], [569, 126], [549, 160], [548, 148], [542, 156], [555, 196], [549, 199], [537, 203], [562, 194], [553, 120], [548, 127], [541, 206], [576, 169], [540, 170], [540, 172], [541, 173], [541, 176], [542, 183], [545, 173], [546, 173], [547, 173], [554, 170], [573, 164], [547, 122], [550, 113], [552, 115], [544, 173], [569, 178], [547, 111], [543, 190], [546, 123], [549, 136], [537, 191], [553, 183], [554, 153], [548, 187], [565, 155], [558, 160], [567, 166], [537, 198], [551, 140], [556, 189], [550, 193], [558, 178], [573, 173], [563, 181], [572, 179], [560, 168], [549, 132], [549, 146], [550, 148], [549, 141], [555, 108], [564, 106], [570, 107], [575, 109], [578, 113], [577, 126], [582, 144], [572, 132], [567, 133], [562, 131], [556, 129], [552, 125], [550, 123], [577, 146], [549, 149], [548, 131], [547, 145], [543, 148], [546, 146], [547, 151], [543, 148], [541, 149], [551, 119], [548, 119], [547, 119], [571, 125], [576, 120], [512, 111], [516, 111], [512, 106], [507, 110], [511, 115], [562, 122], [567, 124], [563, 118], [557, 121], [561, 127]]]
    # face_points = list(map(lambda p_xy: (p_xy[0], -p_xy[1]), face_points[0]))
    # gaze_xy = Point(530, -170)
    # VisualizeFeaturesWithIndex(gaze_xy, CreatePolygons(face_points), face_points, [])

    TestGetClosestPoint()
    TestGetClosestFeature()
    TestGazeOnFace()